        -:    0:Source:F:/JetBrainsProj/ClionProject/C++/DataStructure/Experiment/HuffmanCodecSystem/SqStack.cpp
        -:    0:Graph:F:\JetBrainsProj\ClionProject\C++\DataStructure\Experiment\HuffmanCodecSystem\cmake-build-debug-\CMakeFiles\HuffmanCodecSystem.dir\SqStack.cpp.gcno
        -:    0:Data:F:\JetBrainsProj\ClionProject\C++\DataStructure\Experiment\HuffmanCodecSystem\cmake-build-debug-\CMakeFiles\HuffmanCodecSystem.dir\SqStack.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "SqStack.h"
        -:    2:
function _Z12InitStack_sqR7SqStacki called 5 returned 100% blocks executed 100%
        5:    3:void InitStack_sq(SqStack &S, int msize) {  // 构造一个容量是msize的顺序栈S
        5:    4:  S.elem = new ElemType[msize];
        5:    4-block  0
call    0 returned 5
        5:    5:  S.stacksize = msize;
        5:    6:  S.top = -1;  // 顺序栈初始时空栈
        5:    7:}  // end InitStack_sq
        -:    8:
function _Z15DestroyStack_sqR7SqStack called 0 returned 0% blocks executed 0%
    #####:    9:void DestroyStack_sq(SqStack &S) {  // 销毁顺序栈
    #####:   10:  delete[] S.elem;
    %%%%%:   10-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   10-block  1
call    2 never executed
    #####:   11:  S.top = -1;
    #####:   12:  S.stacksize = 0;
    #####:   13:}
        -:   14:
function _Z9IncrementR7SqStacki called 0 returned 0% blocks executed 0%
    #####:   15:void Increment(SqStack &S, int incresize) {
        -:   16:  ElemType *a;
    #####:   17:  a = new ElemType[S.stacksize + incresize];
    %%%%%:   17-block  0
call    0 never executed
    #####:   18:  for (int i = 0; i <= S.top; i++) a[i] = S.elem[i];
    %%%%%:   18-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   18-block  1
    #####:   19:  delete[] S.elem;
    %%%%%:   19-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   19-block  1
call    2 never executed
    #####:   20:  S.elem = a;
    #####:   21:  S.stacksize += incresize;
    #####:   22:}
        -:   23:
function _Z9GetTop_sq7SqStackRc called 0 returned 0% blocks executed 0%
    #####:   24:bool GetTop_sq(
        -:   25:    SqStack S,
        -:   26:    ElemType &e) {  // 若非空，用e返回栈顶值，返回true,否则返回false,不改变栈
    #####:   27:  if (StackEmpty(S)) return false;
    %%%%%:   27-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   27-block  1
    #####:   28:  e = S.elem[S.top];
    #####:   29:  return true;
    %%%%%:   29-block  0
        -:   30:}
        -:   31:
function _Z7Push_sqR7SqStackc called 665 returned 100% blocks executed 67%
      665:   32:void Push_sq(SqStack &S, ElemType e) {  // 将e插入栈S，作为S新的栈顶元素
     665*:   33:  if (S.top == S.stacksize - 1) Increment(S);
      665:   33-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 665
    %%%%%:   33-block  1
call    2 never executed
      665:   34:  S.elem[++S.top] = e;
      665:   35:}  // end Push_sq
        -:   36:
function _Z6Pop_sqR7SqStackRc called 665 returned 100% blocks executed 75%
      665:   37:bool Pop_sq(SqStack &S, ElemType &e) {  // 若顺序栈S非空，删除栈顶元素并赋予e，
        -:   38:                                        // 返回TRUE，栈空则返回FALSE
     665*:   39:  if (S.top == -1) return false;
      665:   39-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 665
    %%%%%:   39-block  1
      665:   40:  e = S.elem[S.top--];
      665:   41:  return true;
      665:   41-block  0
        -:   42:}  // end Pop_sq
        -:   43:
function _Z10StackEmpty7SqStack called 0 returned 0% blocks executed 0%
    #####:   44:bool StackEmpty(SqStack S) {
    #####:   45:  if (S.top == -1)
    %%%%%:   45-block  0
branch  0 never executed
branch  1 never executed
    #####:   46:    return true;
    %%%%%:   46-block  0
        -:   47:  else
    #####:   48:    return false;
    %%%%%:   48-block  0
        -:   49:}
